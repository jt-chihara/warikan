// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: settlement/v1/settlement.proto

package settlementv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SettlementService_CalculateSettlement_FullMethodName  = "/settlement.v1.SettlementService/CalculateSettlement"
	SettlementService_GetSettlementHistory_FullMethodName = "/settlement.v1.SettlementService/GetSettlementHistory"
	SettlementService_MarkAsSettled_FullMethodName        = "/settlement.v1.SettlementService/MarkAsSettled"
)

// SettlementServiceClient is the client API for SettlementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SettlementServiceClient interface {
	CalculateSettlement(ctx context.Context, in *CalculateSettlementRequest, opts ...grpc.CallOption) (*CalculateSettlementResponse, error)
	GetSettlementHistory(ctx context.Context, in *GetSettlementHistoryRequest, opts ...grpc.CallOption) (*GetSettlementHistoryResponse, error)
	MarkAsSettled(ctx context.Context, in *MarkAsSettledRequest, opts ...grpc.CallOption) (*MarkAsSettledResponse, error)
}

type settlementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSettlementServiceClient(cc grpc.ClientConnInterface) SettlementServiceClient {
	return &settlementServiceClient{cc}
}

func (c *settlementServiceClient) CalculateSettlement(ctx context.Context, in *CalculateSettlementRequest, opts ...grpc.CallOption) (*CalculateSettlementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculateSettlementResponse)
	err := c.cc.Invoke(ctx, SettlementService_CalculateSettlement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementServiceClient) GetSettlementHistory(ctx context.Context, in *GetSettlementHistoryRequest, opts ...grpc.CallOption) (*GetSettlementHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSettlementHistoryResponse)
	err := c.cc.Invoke(ctx, SettlementService_GetSettlementHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementServiceClient) MarkAsSettled(ctx context.Context, in *MarkAsSettledRequest, opts ...grpc.CallOption) (*MarkAsSettledResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkAsSettledResponse)
	err := c.cc.Invoke(ctx, SettlementService_MarkAsSettled_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SettlementServiceServer is the server API for SettlementService service.
// All implementations must embed UnimplementedSettlementServiceServer
// for forward compatibility.
type SettlementServiceServer interface {
	CalculateSettlement(context.Context, *CalculateSettlementRequest) (*CalculateSettlementResponse, error)
	GetSettlementHistory(context.Context, *GetSettlementHistoryRequest) (*GetSettlementHistoryResponse, error)
	MarkAsSettled(context.Context, *MarkAsSettledRequest) (*MarkAsSettledResponse, error)
	mustEmbedUnimplementedSettlementServiceServer()
}

// UnimplementedSettlementServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSettlementServiceServer struct{}

func (UnimplementedSettlementServiceServer) CalculateSettlement(context.Context, *CalculateSettlementRequest) (*CalculateSettlementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateSettlement not implemented")
}
func (UnimplementedSettlementServiceServer) GetSettlementHistory(context.Context, *GetSettlementHistoryRequest) (*GetSettlementHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettlementHistory not implemented")
}
func (UnimplementedSettlementServiceServer) MarkAsSettled(context.Context, *MarkAsSettledRequest) (*MarkAsSettledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAsSettled not implemented")
}
func (UnimplementedSettlementServiceServer) mustEmbedUnimplementedSettlementServiceServer() {}
func (UnimplementedSettlementServiceServer) testEmbeddedByValue()                           {}

// UnsafeSettlementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SettlementServiceServer will
// result in compilation errors.
type UnsafeSettlementServiceServer interface {
	mustEmbedUnimplementedSettlementServiceServer()
}

func RegisterSettlementServiceServer(s grpc.ServiceRegistrar, srv SettlementServiceServer) {
	// If the following call pancis, it indicates UnimplementedSettlementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SettlementService_ServiceDesc, srv)
}

func _SettlementService_CalculateSettlement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateSettlementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementServiceServer).CalculateSettlement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettlementService_CalculateSettlement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementServiceServer).CalculateSettlement(ctx, req.(*CalculateSettlementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementService_GetSettlementHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettlementHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementServiceServer).GetSettlementHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettlementService_GetSettlementHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementServiceServer).GetSettlementHistory(ctx, req.(*GetSettlementHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementService_MarkAsSettled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkAsSettledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementServiceServer).MarkAsSettled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettlementService_MarkAsSettled_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementServiceServer).MarkAsSettled(ctx, req.(*MarkAsSettledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SettlementService_ServiceDesc is the grpc.ServiceDesc for SettlementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SettlementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "settlement.v1.SettlementService",
	HandlerType: (*SettlementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateSettlement",
			Handler:    _SettlementService_CalculateSettlement_Handler,
		},
		{
			MethodName: "GetSettlementHistory",
			Handler:    _SettlementService_GetSettlementHistory_Handler,
		},
		{
			MethodName: "MarkAsSettled",
			Handler:    _SettlementService_MarkAsSettled_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "settlement/v1/settlement.proto",
}
