# GraphQL schema definition

scalar DateTime

type Group {
  id: ID!
  name: String!
  description: String
  currency: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  members: [Member!]!
}

type Member {
  id: ID!
  name: String!
  email: String
  joinedAt: DateTime!
}

input CreateGroupInput {
  name: String!
  description: String
  currency: String
  memberNames: [String!]!
}

input UpdateGroupInput {
  id: ID!
  name: String!
  description: String
  currency: String!
}

input AddMemberInput {
  groupId: ID!
  memberName: String!
  memberEmail: String
}

input RemoveMemberInput {
  groupId: ID!
  memberId: ID!
}

type Expense {
  id: ID!
  groupId: ID!
  amount: Int!
  description: String!
  paidById: ID!
  paidByName: String!
  splitMembers: [SplitMember!]!
  createdAt: DateTime!
}

type SplitMember {
  memberId: ID!
  memberName: String!
  amount: Int!
}

type Settlement {
  fromMemberId: ID!
  toMemberId: ID!
  amount: Int!
  fromName: String!
  toName: String!
}

type MemberBalance {
  memberId: ID!
  memberName: String!
  balance: Int!
}

type CalculateSettlementsResult {
  settlements: [Settlement!]!
  balances: [MemberBalance!]!
}

input AddExpenseInput {
  groupId: ID!
  amount: Int!
  description: String!
  paidById: ID!
  splitMemberIds: [ID!]!
}

input UpdateExpenseInput {
  expenseId: ID!
  amount: Int!
  description: String!
  paidById: ID!
  splitMemberIds: [ID!]!
}

input ExpenseInput {
  id: ID!
  payerId: ID!
  amount: Int!
  description: String!
  splitBetween: [ID!]!
  createdAt: DateTime!
}

type Query {
  group(id: ID!): Group
  groups: [Group!]!
  groupExpenses(groupId: ID!): [Expense!]!
  calculateSettlements(groupId: ID!, expenses: [ExpenseInput!]!): CalculateSettlementsResult!
}

type Mutation {
  createGroup(input: CreateGroupInput!): Group!
  updateGroup(input: UpdateGroupInput!): Group!
  deleteGroup(id: ID!): Boolean!
  addMember(input: AddMemberInput!): Member!
  removeMember(input: RemoveMemberInput!): Boolean!
  addExpense(input: AddExpenseInput!): Expense!
  updateExpense(input: UpdateExpenseInput!): Expense!
  deleteExpense(expenseId: ID!): Boolean!
}