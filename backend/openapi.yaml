openapi: 3.0.3
info:
  title: Warikan REST API
  version: 0.1.0
servers:
  - url: http://localhost:8080
paths:
  /healthz:
    get:
      summary: Health check
      responses:
        '200': { description: OK }
  /groups:
    get:
      summary: List groups
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Group' }
    post:
      summary: Create group
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateGroupInput' }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Group' } } } }
  /groups/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: string, format: uuid }
    get:
      summary: Get group
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Group' } } } }
        '404': { description: Not Found }
    put:
      summary: Update group
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateGroupInput' }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Group' } } } }
        '404': { description: Not Found }
    delete:
      summary: Delete group
      responses:
        '204': { description: No Content }
        '404': { description: Not Found }
  /groups/{id}/members:
    post:
      summary: Add member
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AddMemberInput' }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Member' } } } }
  /groups/{id}/members/{member_id}:
    parameters:
      - in: path
        name: member_id
        required: true
        schema: { type: string, format: uuid }
    delete:
      summary: Remove member
      responses:
        '204': { description: No Content }
        '404': { description: Not Found }
  /groups/{id}/expenses:
    get:
      summary: List group expenses
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Expense' } } } } }
    post:
      summary: Add expense
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AddExpenseInput' }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Expense' } } } }
  /groups/{id}/expenses/{expense_id}:
    parameters:
      - in: path
        name: expense_id
        required: true
        schema: { type: string, format: uuid }
    put:
      summary: Update expense
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateExpenseInput' }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Expense' } } } }
        '404': { description: Not Found }
    delete:
      summary: Delete expense (deprecated; use /expenses/{expense_id})
      responses:
        '204': { description: No Content }
        '404': { description: Not Found }
  /expenses/{expense_id}:
    parameters:
      - in: path
        name: expense_id
        required: true
        schema: { type: string, format: uuid }
    delete:
      summary: Delete expense by id
      responses:
        '204': { description: No Content }
        '404': { description: Not Found }
    put:
      summary: Update expense by id
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateExpenseInput' }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Expense' } } } }
        '404': { description: Not Found }

components:
  schemas:
    Group:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        description: { type: string, nullable: true }
        currency: { type: string }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
        members:
          type: array
          items: { $ref: '#/components/schemas/Member' }
    Member:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        email: { type: string, nullable: true }
        joined_at: { type: string, format: date-time }
    Expense:
      type: object
      properties:
        id: { type: string, format: uuid }
        group_id: { type: string, format: uuid }
        amount: { type: integer }
        description: { type: string }
        paid_by_id: { type: string, format: uuid }
        paid_by_name: { type: string }
        split_members:
          type: array
          items: { $ref: '#/components/schemas/SplitMember' }
        created_at: { type: string, format: date-time }
    SplitMember:
      type: object
      properties:
        member_id: { type: string, format: uuid }
        member_name: { type: string }
        amount: { type: integer }
    CreateGroupInput:
      type: object
      required: [name, member_names]
      properties:
        name: { type: string }
        description: { type: string, nullable: true }
        currency: { type: string, nullable: true }
        member_names:
          type: array
          items: { type: string }
    UpdateGroupInput:
      type: object
      required: [name, currency]
      properties:
        name: { type: string }
        description: { type: string, nullable: true }
        currency: { type: string }
    AddMemberInput:
      type: object
      required: [member_name]
      properties:
        member_name: { type: string }
        member_email: { type: string, nullable: true }
    AddExpenseInput:
      type: object
      required: [amount, description, paid_by_id, split_member_ids]
      properties:
        amount: { type: integer }
        description: { type: string }
        paid_by_id: { type: string, format: uuid }
        split_member_ids:
          type: array
          items: { type: string, format: uuid }
    UpdateExpenseInput:
      allOf:
        - $ref: '#/components/schemas/AddExpenseInput'
    ExpenseInput:
      type: object
      required: [id, payer_id, amount, split_between]
      properties:
        id: { type: string, format: uuid }
        payer_id: { type: string, format: uuid }
        amount: { type: integer }
        description: { type: string, nullable: true }
        split_between:
          type: array
          items: { type: string, format: uuid }
        created_at: { type: string, format: date-time, nullable: true }
    CalculateSettlementsResult:
      type: object
      properties:
        settlements:
          type: array
          items: { $ref: '#/components/schemas/Settlement' }
        balances:
          type: array
          items: { $ref: '#/components/schemas/MemberBalance' }
    Settlement:
      type: object
      properties:
        from_member_id: { type: string, format: uuid }
        to_member_id: { type: string, format: uuid }
        amount: { type: integer }
        from_name: { type: string }
        to_name: { type: string }
    MemberBalance:
      type: object
      properties:
        member_id: { type: string, format: uuid }
        member_name: { type: string }
        balance: { type: integer }
